{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Train a Quadcopter How to Fly\n",
    "\n",
    "Design an agent that can fly a quadcopter, and then train it using a reinforcement learning algorithm of your choice! Try to apply the techniques you have learnt, but also feel free to come up with innovative ideas and test them.\n",
    "\n",
    "![Quadcopter doing a flip trying to takeoff from the ground](images/quadcopter_tumble.png)\n",
    "\n",
    "## Instructions\n",
    "\n",
    "> **Note**: If you haven't done so already, follow the steps in this repo's README to install ROS, and ensure that the simulator is running and correctly connecting to ROS.\n",
    "\n",
    "When you are ready to start coding, take a look at the `quad_controller_rl/src/` (source) directory to better understand the structure. Here are some of the salient items:\n",
    "\n",
    "- `src/`: Contains all the source code for the project.\n",
    "  - `quad_controller_rl/`: This is the root of the Python package you'll be working in.\n",
    "  - ...\n",
    "  - `tasks/`: Define your tasks (environments) in this sub-directory.\n",
    "    - `__init__.py`: When you define a new task, you'll have to import it here.\n",
    "    - `base_task.py`: Generic base class for all tasks, with documentation.\n",
    "    - `takeoff.py`: This is the first task, already defined for you, and set to run by default.\n",
    "  - ...\n",
    "  - `agents/`: Develop your reinforcement learning agents here.\n",
    "    - `__init__.py`: When you define a new agent, you'll have to import it here, just like tasks.\n",
    "    - `base_agent.py`: Generic base class for all agents, with documentation.\n",
    "    - `policy_search.py`: A sample agent has been provided here, and is set to run by default.\n",
    "  - ...\n",
    "\n",
    "### Tasks\n",
    "\n",
    "Open up the base class for tasks, `BaseTask`, defined in `tasks/base_task.py`:\n",
    "\n",
    "```python\n",
    "class BaseTask:\n",
    "    \"\"\"Generic base class for reinforcement learning tasks.\"\"\"\n",
    "\n",
    "    def __init__(self):\n",
    "        \"\"\"Define state and action spaces, initialize other task parameters.\"\"\"\n",
    "        pass\n",
    "    \n",
    "    def set_agent(self, agent):\n",
    "        \"\"\"Set an agent to carry out this task; to be called from update.\"\"\"\n",
    "        self.agent = agent\n",
    "    \n",
    "    def reset(self):\n",
    "        \"\"\"Reset task and return initial condition.\"\"\"\n",
    "        raise NotImplementedError\n",
    "    \n",
    "    def update(self, timestamp, pose, angular_velocity, linear_acceleration):\n",
    "        \"\"\"Process current data, call agent, return action and done flag.\"\"\"\n",
    "        raise NotImplementedError            \n",
    "```\n",
    "\n",
    "All tasks must inherit from this class to function properly. You will need to override the `reset()` and `update()` methods when defining a task, otherwise you will get `NotImplementedError`'s. Besides these two, you should define the state (observation) space and the action space for the task in the constructor, `__init__()`, and initialize any other variables you may need to run the task.\n",
    "\n",
    "Now compare this with the first concrete task `Takeoff`, defined in `tasks/takeoff.py`:\n",
    "\n",
    "```python\n",
    "class Takeoff(BaseTask):\n",
    "    \"\"\"Simple task where the goal is to lift off the ground and reach a target height.\"\"\"\n",
    "    ...\n",
    "```\n",
    "\n",
    "In `__init__()`, notice how the state and action spaces are defined using [OpenAI Gym spaces](https://gym.openai.com/docs/#spaces), like [`Box`](https://github.com/openai/gym/blob/master/gym/spaces/box.py). These objects provide a clean and powerful interface for agents to explore. For instance, they can inspect the dimensionality of a space (`shape`), ask for the limits (`high` and `low`), or even sample a bunch of observations using the `sample()` method, before beginning to interact with the environment. We also set a time limit (`max_duration`) for each episode here, and the height (`target_z`) that the quadcopter needs to reach for a successful takeoff.\n",
    "\n",
    "The `reset()` method is meant to give you a chance to reset/initialize any variables you need in order to prepare for the next episode. You do not need to call it yourself; it will be invoked externally. And yes, it will be called once before each episode, including the very first one. Here `Takeoff` doesn't have any episode variables to initialize, but it must return a valid _initial condition_ for the task, which is a tuple consisting of a [`Pose`](http://docs.ros.org/api/geometry_msgs/html/msg/Pose.html) and [`Twist`](http://docs.ros.org/api/geometry_msgs/html/msg/Twist.html) object. These are ROS message types used to convey the pose (position, orientation) and velocity (linear, angular) you want the quadcopter to have at the beginning of an episode. You may choose to supply the same initial values every time, or change it a little bit, e.g. `Takeoff` drops the quadcopter off from a small height with a bit of randomness.\n",
    "\n",
    "> **Tip**: Slightly randomized initial conditions can help the agent explore the state space faster.\n",
    "\n",
    "Finally, the `update()` method is perhaps the most important. This is where you define the dynamics of the task and engage the agent. It is called by a ROS process periodically (roughly 30 times a second, by default), with current data from the simulation. A number of arguments are available: `timestamp` (you can use this to check for timeout, or compute velocities), `pose` (position, orientation of the quadcopter), `angular_velocity`, and `linear_acceleration`. You do not have to include all these variables in every task, e.g. `Takeoff` only uses pose information, and even that requires a 7-element state vector.\n",
    "\n",
    "Once you have prepared the state you want to pass on to your agent, you will need to compute the reward, and check whether the episode is complete (e.g. agent crossed the time limit, or reached a certain height). Note that these two things (`reward` and `done`) are based on actions that the agent took in the past. When you are writing your own agents, you have to be mindful of this.\n",
    "\n",
    "Now you can pass in the `state`, `reward` and `done` values to the agent's `step()` method and expect an action vector back that matches the action space that you have defined, in this case a `Box(6,)`. After checking that the action vector is non-empty, and clamping it to the space limits, you have to convert it into a ROS `Wrench` message. The first 3 elements of the action vector are interpreted as force in x, y, z directions, and the remaining 3 elements convey the torque to be applied around those axes, respectively.\n",
    "\n",
    "Return the `Wrench` object (or `None` if you don't want to take any action) and the `done` flag from your `update()` method (note that when `done` is `True`, the `Wrench` object is ignored, so you can return `None` instead). This will be passed back to the simulation as a control command, and will affect the quadcopter's pose, orientation, velocity, etc. You will be able to gauge the effect when the `update()` method is called in the next time step.\n",
    "\n",
    "### Agents\n",
    "\n",
    "Reinforcement learning agents are defined in a similar way. Open up the generic agent class, `BaseAgent`, defined in `agents/base_agent.py`, and the sample agent `RandomPolicySearch` defined in `agents/policy_search.py`. They are actually even simpler to define - you only need to implement the `step()` method that is discussed above. It needs to consume `state` (vector), `reward` (scalar value) and `done` (boolean), and produce an `action` (vector). The state and action vectors must match the respective space indicated by the task. And that's it!\n",
    "\n",
    "Well, that's just to get things working correctly! The sample agent given `RandomPolicySearch` uses a very simplistic linear policy to directly compute the action vector as a dot product of the state vector and a matrix of weights. Then, it randomly perturbs the parameters by adding some Gaussian noise, to produce a different policy. Based on the average reward obtained in each episode (\"score\"), it keeps track of the best set of parameters found so far, how the score is changing, and accordingly tweaks a scaling factor to widen or tighten the noise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "raw_mimetype": "text/html"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width: 100%; text-align: center;\">\n",
       "    <h3>Teach a Quadcopter How to Tumble</h3>\n",
       "    <video poster=\"images/quadcopter_tumble.png\" width=\"640\" controls muted>\n",
       "        <source src=\"images/quadcopter_tumble.mp4\" type=\"video/mp4\" />\n",
       "        <p>Video: Quadcopter tumbling, trying to get off the ground</p>\n",
       "    </video>\n",
       "</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%html\n",
    "<div style=\"width: 100%; text-align: center;\">\n",
    "    <h3>Teach a Quadcopter How to Tumble</h3>\n",
    "    <video poster=\"images/quadcopter_tumble.png\" width=\"640\" controls muted>\n",
    "        <source src=\"images/quadcopter_tumble.mp4\" type=\"video/mp4\" />\n",
    "        <p>Video: Quadcopter tumbling, trying to get off the ground</p>\n",
    "    </video>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obviously, this agent performs very poorly on the task. It does manage to move the quadcopter, which is good, but instead of a stable takeoff, it often leads to dizzying cartwheels and somersaults! And that's where you come in - your first _task_ is to design a better agent for this takeoff task. Instead of messing with the sample agent, create new file in the `agents/` directory, say `policy_gradients.py`, and define your own agent in it. Remember to inherit from the base agent class, e.g.:\n",
    "\n",
    "```python\n",
    "class DDPG(BaseAgent):\n",
    "    ...\n",
    "```\n",
    "\n",
    "You can borrow whatever you need from the sample agent, including ideas on how you might modularize your code (using helper methods like `act()`, `learn()`, `reset_episode_vars()`, etc.).\n",
    "\n",
    "> **Note**: This setup may look similar to the common OpenAI Gym paradigm, but there is one small yet important difference. Instead of the agent calling a method on the environment (to execute an action and obtain the resulting state, reward and done value), here it is the task that is calling a method on the agent (`step()`). If you plan to store experience tuples for learning, you will need to cache the last state ($S_{t-1}$) and last action taken ($A_{t-1}$), then in the next time step when you get the new state ($S_t$) and reward ($R_t$), you can store them along with the `done` flag ($\\left\\langle S_{t-1}, A_{t-1}, R_t, S_t, \\mathrm{done?}\\right\\rangle$).\n",
    "\n",
    "When an episode ends, the agent receives one last call to the `step()` method with `done` set to `True` - this is your chance to perform any cleanup/reset/batch-learning (note that no reset method is called on an agent externally). The action returned on this last call is ignored, so you may safely return `None`. The next call would be the beginning of a new episode.\n",
    "\n",
    "One last thing - in order to run your agent, you will have to edit `agents/__init__.py` and import your agent class in it, e.g.:\n",
    "\n",
    "```python\n",
    "from quad_controller_rl.agents.policy_gradients import DDPG\n",
    "```\n",
    "\n",
    "Then, while launching ROS, you will need to specify this class name on the commandline/terminal:\n",
    "\n",
    "```bash\n",
    "roslaunch quad_controller_rl rl_controller.launch agent:=DDPG\n",
    "```\n",
    "\n",
    "Okay, now the first task is cut out for you - follow the instructions below to implement an agent that learns to take off from the ground. For the remaining tasks, you get to define the tasks as well as the agents! Use the `Takeoff` task as a guide, and refer to the `BaseTask` docstrings for the different methods you need to override. Use some debug print statements to understand the flow of control better. And just like creating new agents, new tasks must inherit `BaseTask`, they need be imported into `tasks/__init__.py`, and specified on the commandline when running:\n",
    "\n",
    "```bash\n",
    "roslaunch quad_controller_rl rl_controller.launch task:=Hover agent:=DDPG\n",
    "```\n",
    "\n",
    "> **Tip**: You typically need to launch ROS and then run the simulator manually. But you can automate that process by either copying/symlinking your simulator to `quad_controller_rl/sim/DroneSim` (`DroneSim` must be an executable/link to one), or by specifying it on the command line, as follows:\n",
    "> \n",
    "> ```bash\n",
    "> roslaunch quad_controller_rl rl_controller.launch task:=Hover agent:=DDPG sim:=<full path>\n",
    "> ```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1: Takeoff\n",
    "\n",
    "### Implement takeoff agent\n",
    "\n",
    "Train an agent to successfully lift off from the ground and reach a certain threshold height. Develop your agent in a file under `agents/` as described above, implementing at least the `step()` method, and any other supporting methods that might be necessary. You may use any reinforcement learning algorithm of your choice (note that the action space consists of continuous variables, so that may somewhat limit your choices).\n",
    "\n",
    "The task has already been defined (in `tasks/takeoff.py`), which you should not edit. The default target height (Z-axis value) to reach is 10 units above the ground. And the reward function is essentially the negative absolute distance from that set point (upto some threshold). An episode ends when the quadcopter reaches the target height (x and y values, orientation, velocity, etc. are ignored), or when the maximum duration is crossed (5 seconds).  See `Takeoff.update()` for more details, including episode bonus/penalty.\n",
    "\n",
    "As you develop your agent, it's important to keep an eye on how it's performing. Build in a mechanism to log/save the total rewards obtained in each episode to file. Once you are satisfied with your agent's performance, return to this notebook to plot episode rewards, and answer the questions below.\n",
    "\n",
    "### Plot episode rewards\n",
    "\n",
    "Plot the total rewards obtained in each episode, either from a single run, or averaged over multiple runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f1a30f7eb70>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1a608cb320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/takeoff/takeoff_stats2.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x111676dd8>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111685cf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/takeoff_stats.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Q**: What algorithm did you use? Briefly discuss why you chose it for this task.\n",
    "\n",
    "**A**: I chose the DDPG algorithm because it works in continuous spaces and the action values are not pre-defined in the environment. I had to contstrain movement to the z-axis, because actions in the x and y axes were too unstable for the agent to learn.\n",
    "\n",
    "\n",
    "**Q**: Using the episode rewards plot, discuss how the agent learned over time.\n",
    "\n",
    "- Was it an easy task to learn or hard?\n",
    "- Was there a gradual learning curve, or an aha moment? \n",
    "- How good was the final performance of the agent? (e.g. mean rewards over the last 10 episodes):\n",
    "\n",
    "**A**:\n",
    "- This was the most difficult task for the agent to learn.  \n",
    "\n",
    "- The drone starts on the ground and requires a z-axis force close to 20.0 to start to lift.  I found that the agent had to explore the state space with little change in reward. Once it found the right action, the reward quickly increased and the agent was able to maintain consistent performance. This was an a-ha moment for the agent.\n",
    "\n",
    "- About -2000. I changed the reward function to incorporate velocity, so the actual reward values are different than the Udacity provided Takeoff task.\n",
    "\n",
    "\n",
    "## Task 2: Hover\n",
    "\n",
    "### Implement hover agent\n",
    "\n",
    "Now, your agent must take off and hover at the specified set point (say, 10 units above the ground). Same as before, you will need to create an agent and implement the `step()` method (and any other supporting methods) to apply your reinforcement learning algorithm. You may use the same agent as before, if you think your implementation is robust, and try to train it on the new task. But then remember to store your previous model weights/parameters, in case your results were worth keeping.\n",
    "\n",
    "### States and rewards\n",
    "\n",
    "Even if you can use the same agent, you will need to create a new task, which will allow you to change the state representation you pass in, how you verify when the episode has ended (the quadcopter needs to hover for at least a few seconds), etc. In this hover task, you may want to pass in the target height as part of the state (otherwise how would the agent know where you want it to go?). You may also need to revisit how rewards are computed. You can do all this in a new task file, e.g. `tasks/hover.py` (remember to follow the steps outlined above to create a new task):\n",
    "\n",
    "```python\n",
    "class Hover(BaseTask):\n",
    "    ...\n",
    "```\n",
    "\n",
    "**Q**: Did you change the state representation or reward function? If so, please explain below what worked best for you, and why you chose that scheme. Include short code snippet(s) if needed.\n",
    "\n",
    "**A**: Both.  I applied the changes described in the \"Troubleshooting\" section of the lesson to include velocity in the state space as well as rewards based on the square of the velocity.\n",
    "\n",
    "### Implementation notes\n",
    "\n",
    "**Q**: Discuss your implementation below briefly, using the following questions as a guide:\n",
    "\n",
    "- What algorithm(s) did you try? What worked best for you?\n",
    "- What was your final choice of hyperparameters (such as $\\alpha$, $\\gamma$, $\\epsilon$, etc.)?\n",
    "- What neural network architecture did you use (if any)? Specify layers, sizes, activation functions, etc.\n",
    "\n",
    "**A**:\n",
    "\n",
    "- DDPG worked well for this task.  With movement constrained to the z-axis, I used 4 layers in the neural networks with size 2-4 as recommended in the \"troubleshooting\" section of the lesson\n",
    "\n",
    "- I did not change the hyperparameters from default, however I did apply L2 regularization, HE and Xavier kernel initialization as well as Batch Normalization per the Lillicrap paper.  The main issue I was trying to address was stability in the action space.  Initially, the actor favored the positive and negative extremes of force action, and for the hover task it had to find a \"sweet spot\" of about 19-20 units of force to hover. I applied BN in the state input layer as well as all layers in the Actor and Critic networks.  This seemed to encourage the agent to explore smooth and gradual changes in the action space. If the actor diverged from the optimal policy (which it often did), it would gradually trend back towards the optimal policy. I briefly tried replacing the sigmoid activation function with tanh, but BN was more effective at producing gradual changes in the state space.  These smooth changes in the action space were good for the hover task, but made learning time longer in the takeoff task, because of the lack of reward changes when the drone is resting on the ground.\n",
    "\n",
    "### Plot episode rewards\n",
    "\n",
    "As before, plot the episode rewards, either from a single run, or averaged over multiple runs. Comment on any changes in learning behavior."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f500cfcab38>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f503c951320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/stats_2018-02-28_21-02-01.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f3e91588a20>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3e9157ac50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/stats_2018-02-28_19-56-15.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f239b61bb38>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f23c91d0128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/hover_3.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f79ae320b38>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f79e24903c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/hover/hover_stats2.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1112e1ac8>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAEICAYAAAC9E5gJAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xd8VGX2+PHPSYeQACEhhISmBOk1oIJgQYoV2wo2QF11\nLYvrumvZ4up39ae74uq6tsUVsCsuumJBgZVVbEBAeiihp0ECpEHq5Pz+mBscYiCBhMxk5rxfr3lx\n57l37py5wJx5yn0eUVWMMcYEtiBvB2CMMcb7LBkYY4yxZGCMMcaSgTHGGCwZGGOMwZKBMcYYLBmY\nZkpE5ovIlEY+58Mi8kZjntPXiMhsEXnU23EY32PJwHiNiOwQkRIRKfZ4PFef16rqBar66smOsb5q\nfJYc50u3lbfjMqa+LBkYb7tEVVt5PO7ydkANcImqtgIGAoOAB70ViIiEeOu9TfNkycD4JBGZKiLf\niMhzIlIgIhtFZLTH/v+JyM+d7e4i8qVzXJ6IvOtx3HARWe7sWy4iwz32dXNeVyQiC4HYGjGcISLf\niki+iKwWkXPqE7uq5gCf404K1ecKF5HpIrJLRPaIyEsi0sLZ96WIXOlsjxARFZGLnOejRWSVs32q\niHwhIvucz/mmiLTxeI8dInK/iKwBDopIiIgMEpGVzmd8F4jwOD5WRD52Pt9+EVkiIvadEKDsL974\nstOBrbi/pP8EvC8iMbUc92dgAdAWSAL+AeAc+wnwLNAO+BvwiYi0c173FrDCOf+fgcN9ECKS6Lz2\nUSAG+A0wV0Ti6gpaRJKAC4B0j+IngB64E0R3IBF4yNn3JXCOs302sA0Y5fH8y+pTA48DHYFeQCfg\n4Rpvfw1wEdAG9//v/wCvO5/hPeBKj2PvBTKAOCAe+B1g89MEKEsGxtv+4/wyrX7c4rFvL/CMqlao\n6rvAJtxfdDVVAF2AjqpaqqpfO+UXAVtU9XVVrVTVt4GNwCUi0hkYCvxRVctU9SvgI49zXg98qqqf\nqmqVqi4EUoEL6/gsRcBuJ/Y/AYiIALcC96jqflUtAv4fMMl53Ze4v/TBnQQe93h+OBmoarqqLnTi\nzcWd3KqPq/asqu5W1RLgDCDU4xr+G1he47olAF2c/UvUJisLWJYMjLddpqptPB4ve+zLrPHltBP3\nr+Ka7sP9q3mZiKwXkZuc8o7OazztxP2rvCNwQFUP1thXrQvwM89EBZyF+8vzWJ8lCvev/J782OwU\nB7QEVnic6zOnHOA7oIeIxOOuObwGdBKRWGAY8BWAiMSLyDsikikihcAb1Gjawp2IqnWk9mtY7Unc\ntZcFIrJNRB44xmczfs6SgfFlic6v6mqdgayaB6lqjqreoqodgduAF0Sku3NslxqHdwYygWygrYhE\n1thXbTfweo1EFamqT9QVtKp+CcwGpjtFeUAJ0MfjXK2dzmZU9RDu5qq7gXWqWg58C/wa2Kqqec55\n/h/uZpx+qhqNu/bieX3gyGaebGq/htVxFqnqvap6CnAp8GvPfhkTWCwZGF/WHpgmIqEi8jPc7eSf\n1jxIRH7mtNMDHMD9hVjlHNtDRK51OlMnAr2Bj1V1J+5mn0dEJExEzgIu8TjtG7ibk8aJSLCIRIjI\nOR7vU5dngDEiMkBVq4CXgadFpL0Tc6KIjPM4/kvgLn7sH/hfjecAUUAxUOD0afy2jhi+Ayr58Rpe\ngbumgRPDxU7nuwAFgAv3dTMByJKB8baP5Mj7DD7w2LcUSMb9y/ox4CpV3VfLOYYCS0WkGJgH3K2q\n25xjL8bdUboPd3PSxR6/tK/F3Um9H3f7/mvVJ1TV3cAE3J2qubhrCr+lnv9nnDb91/ixk/h+3E0y\n3ztNPIuA0zxe8iXuL/uvjvIc4BFgMO4v7k+A9+uIoRy4ApjqfMaJNV6T7MRRjDtxvKCqi+vz+Yz/\nEesvMr5IRKYCP1fVs7wdizGBwGoGxhhjLBkYY4yxZiJjjDFYzcAYYwzQbCazio2N1a5du3o7DGOM\naVZWrFiRp6p1TqPSbJJB165dSU1N9XYYxhjTrIhIzbvwa2XNRMYYY7yXDERkvIhsEpF0mxPFGGO8\nyyvJQESCgedxT/PbG7hGRHp7IxZjjDHe6zMYBqSr6jYAEXkH963/G47nJBUVFWRkZFBaWnoSQjT1\nERERQVJSEqGhod4OxRjTAN5KBokcOdVuBu45Yo4gIrfingeezp0719xNRkYGUVFRdO3alSMnZjRN\nQVXZt28fGRkZdOvWzdvhGGMawKc7kFV1hqqmqGpKXNxPR0aVlpbSrl07SwReIiK0a9fOambG+AFv\nJYNM3Ev2VUtyyo6bJQLvsutvjH/wVjJYDiQ7C5KH4V7+b56XYjHGGJ9T4arinWW7yC0qa5L380oy\nUNVK3At3fA6kAXNUdb03YjHGGF/0zvLdPPD+Wi74+xK+3pJX9wsayGt9Bs5C4z1U9VRVfcxbcTRE\nfn4+L7zwwjGP2bFjB2+99Vad59qxYwd9+/ZtrNAana/HZ4w/Kat08eLidHolRNO2ZSg3zFzKk59v\npNJ18hai8+kOZF/XmMngeFRWVjbq+WrjcrlO+nsY05ypKv/8citLtuTS2LM/v5eaQVZBKQ9e0JMP\n7xrB1UM68fzirUyc8T2Z+SX1OkdVlbJi54F6v2ezmZuoLo98tJ4NWYWNes7eHaP50yV9jrr/gQce\nYOvWrQwcOJAxY8YAMH/+fESEP/zhD0ycOJEHHniAtLQ0Bg4cyJQpU7j88su54YYbOHjwIADPPfcc\nw4cPrzOW2bNn8/7771NcXIzL5eLLL7/kySefZM6cOZSVlXH55ZfzyCOP8OSTTxIeHs60adO45557\nWL16NV988QVffPEFr7zyCm+++Sa33347y5cvp6SkhKuuuopHHnkEcM//NHHiRBYuXMh9991HcnIy\nN910EwBjx45t6OU0xq9szT3I4/M3AjCwUxumje7Ouae1b/CgivLKKl5YnM7gzm0YmRyLiPCXq/oz\nvHs7fvf+Wi78+xL+elV/xvXp8JPXVriqWLZ9P5+ty+Hz9TnsPY7+Br9JBt7wxBNPsG7dOlatWsXc\nuXN56aWXWL16NXl5eQwdOpRRo0bxxBNPMH36dD7++GMADh06xMKFC4mIiGDLli1cc8019Z6Ab+XK\nlaxZs4aYmBgWLFjAli1bWLZsGarKpZdeyldffcXIkSN56qmnmDZtGqmpqZSVlVFRUcGSJUsYNWoU\nAI899hgxMTG4XC5Gjx7NmjVr6N+/PwDt2rVj5cqVAPTv35/nnnuOUaNG8dvf1rX2ujGBJcv5hT75\nzC78N20vN81OpW9iNHedm8zY3vEEBZ1YUnhvxW6yCkp5/Mr+RySWCQMTGZDUhrveXsltr69g6vCu\nPHhhT1Th6y15fLY+h0Vpe8g/VEFEaBDn9GjP+L4duPwv9Xtfv0kGx/oF3xS+/vprrrnmGoKDg4mP\nj+fss89m+fLlREdHH3FcRUUFd911F6tWrSI4OJjNmzfX+z3GjBlDTEwMAAsWLGDBggUMGjQIgOLi\nYrZs2cLkyZNZsWIFhYWFhIeHM3jwYFJTU1myZAnPPvssAHPmzGHGjBlUVlaSnZ3Nhg0bDieDiRMn\nAu4msPz8/MMJ5IYbbmD+/PkNu0jG+JHsAncyuHXUKfzx4t588EMmLyxO5xdvrOC0+CjuPK87F/VL\nIPg4koK7VrCVgZ3aMCo59if7u8ZGMvf24TwxfyOzvtnBfzfuYX9xOQfLXURFhDCmVzxj+3Tg7B5x\ntAgLPq7P4zfJoLl4+umniY+PZ/Xq1VRVVREREVHv10ZGRh7eVlUefPBBbrvttp8c161bN2bPns3w\n4cPp378/ixcvJj09nV69erF9+3amT5/O8uXLadu2LVOnTj3ipjHP9zDGHF1mfilBAvHREYQGB3F1\nSieuGJTIx2uyeW5xOtPe/oFnFm3mH9cMok/H1vU659yVGWTml/DY5X2P2twUHhLMny7pw/BTY3l+\ncTpndY/jgr4dOOOUdoSFnHg3sHUgN0BUVBRFRUUAjBw5knfffReXy0Vubi5fffUVw4YNO+IYgIKC\nAhISEggKCuL1118/4Y7acePGMXPmTIqLiwHIzMxk7969h2OZPn06o0aNYuTIkbz00ksMGjQIEaGw\nsJDIyEhat27Nnj17jvprv02bNrRp04avv/4agDfffPOE4jTGX2XllxxOBNVCgoO4bFAiC341iheu\nG8yhMhc3zlp+uEnpWMorq3jui3QGdGrD2T3qXIuGMb3j+c+dI3j8in6M6hHXoEQAlgwapF27dowY\nMYK+ffvy3Xff0b9/fwYMGMB5553HX//6Vzp06ED//v0JDg5mwIABPP3009xxxx28+uqrDBgwgI0b\nN57wL/GxY8dy7bXXcuaZZ9KvXz+uuuqqIxJTdnY2Z555JvHx8URERDBy5EgABgwYwKBBg+jZsyfX\nXnstI0aMOOp7zJo1izvvvJOBAwc2+mgJY5q7rPwSElrXXrMPChIu7JfA7JuGcqjcxU2zl1NUWnHM\n873v1Ap+dX6yV+7sl+bynzwlJUVrdrSmpaXRq1cvL0VkqtnfgwlE5zy5mL6JrXnu2sHHPG7Jllxu\nnLWc4d1jeWVKyhE1iWoVrirOnf4/2kWG8Z87RzRqMhCRFaqaUtdxVjMwxpjjVFWlZBWUktimRZ3H\njkyO47HL+/LV5lwe+nBdrbXs91dmkHGghF+d38Nr831ZB7KP+fzzz7n//vuPKOvWrRsffPCBlyIy\nxtS072A55ZVVdKxHMgCYOLQzO/cd4oX/baVzTCS3n3Pq4X0VriqeW5xO/6TWnHNa3X0FJ0uzTwaq\n6lczZ44bN45x48Z5O4x6ay7NjMY0puoO4fomA4DfjD2N3QdK+MtnG+kU04KL+3cE4IOVmezeX8Ij\nl/bx6ndZs24mioiIYN++ffaF5CXVi9scz/BYY/zBj8mg/v/2g4KEJ6/qT0qXtvx6zmpW7Nx/RK3g\n3NPan6xw66VZ1wySkpLIyMggNzfX26EErOplL40JJNXzA9Wnz8BTRGgwMyancMUL33DLayu47vTO\n7Np/iIcuTvF6C0ezTgahoaG23KIxpsll5ZfSMiyY1i2Of+3vmMgwZt04jCte+IZ/fJFO38RoRvfy\nbq0AmnkzkTHGeEN2QQkd27Q44V/z3WIjeXlyColtWvDA+F5erxVAM68ZGGOMN2TllxxX53FtUrrG\n8PX95/pEIgCrGRhjzHHLzC8l8Tg6j4/GVxIBWDIwxpjjUlrhIq+4jITWDasZ+JoGJQMR+ZmIrBeR\nKhFJqbHvQRFJF5FNIjLOo3yIiKx19j0rvpQajTGmDjkF7ll+G9pM5GsaWjNYB1wBfOVZKCK9gUlA\nH2A88IKIVE+u/SJwC5DsPMY3MAZjjGkyJ3KPQXPQoGSgqmmquqmWXROAd1S1TFW3A+nAMBFJAKJV\n9Xt13yn2GnBZQ2IwxpimdKL3GPi6k9VnkAjs9nie4ZQlOts1y40xplnIync3E3U4yvTVzVWdQ0tF\nZBHw05WX4feq+mHjh3TEe98K3ArQuXPnk/lWxhhTL1n5JcRFhRMecnzLSvq6OpOBqp5/AufNBDp5\nPE9yyjKd7ZrlR3vvGcAMcK9ncAJxGGNMo8oqaPg9Br7oZDUTzQMmiUi4iHTD3VG8TFWzgUIROcMZ\nRTQZOKm1C2OMaUyZ+SWNco+Br2no0NLLRSQDOBP4REQ+B1DV9cAcYAPwGXCnqlYv9nsH8C/cncpb\ngdoX4TXGGB+jqu67j/3sHgNo4HQUqvoBUOuqK6r6GPBYLeWpQN+GvK8xxnhD/qEKSivqv6hNc2J3\nIBtjTD1lnsCiNs2FJQNjjKmnLD+9xwAsGRhjTL1VJ4ME60A2xpjAlVVQSlhIEO0iw7wdSqOzZGCM\nMfXkHlZ64ova+DJLBsYYU0/uRW38r4kILBkYY0y9+es9BmDJwBhj6qW8soq9RWV+OawULBkYY0y9\n7CksRdU/h5WCJQNjjKkXf77hDCwZGGNMvWQX+OcKZ9UsGRhjTD1UL2pjNQNjjAlgmfkltIsMIyLU\nvxa1qWbJwBhj6sF9j4F/1grAkoExxtRLVn4JCX627rEnSwbGGFMHVSXzgNUMjDEmoBWWVnKw3OW3\n9xiAJQNjjKlTlp/fYwCWDIwxpk4/JgPrM6iViDwpIhtFZI2IfCAibTz2PSgi6SKySUTGeZQPEZG1\nzr5nxR/ngjXG+BV/XuGsWkNrBguBvqraH9gMPAggIr2BSUAfYDzwgohUD859EbgFSHYe4xsYgzHG\nnFSZ+aWEBguxrcK9HcpJ06BkoKoLVLXSefo9kORsTwDeUdUyVd0OpAPDRCQBiFbV71VVgdeAyxoS\ngzHGnGzuYaUtCAry34aMxuwzuAmY72wnArs99mU4ZYnOds3yWonIrSKSKiKpubm5jRiqMcbUX3aB\n/y5qU63OZCAii0RkXS2PCR7H/B6oBN5szOBUdYaqpqhqSlxcXGOe2hhj6i0rv9SvRxIBhNR1gKqe\nf6z9IjIVuBgY7TT9AGQCnTwOS3LKMvmxKcmz3BhjfFKlq4qcwlK/7jyGho8mGg/cB1yqqoc8ds0D\nJolIuIh0w91RvExVs4FCETnDGUU0GfiwITEYY8zJtLeoDFeVkuCny11Wq7NmUIfngHBgoTNC9HtV\n/YWqrheROcAG3M1Hd6qqy3nNHcBsoAXuPob5PzmrMcb4iEC4xwAamAxUtfsx9j0GPFZLeSrQtyHv\na4wxTSUzAO4xALsD2Rhjjql6UZsESwbGGBO4svJLaN0ilFbhDW1V922WDIwx5hj8fVGbapYMjDHm\nGDLzS0j0885jsGRgjDHHZDUDY4wJcMVllRSWVloyMMaYQJYdAIvaVLNkYIwxR/HjPQbWZ2CMMQGr\n+h4DqxkYY0wAy8ovIThIaB9lNQNjjAlYWfkldIiOINiPF7WpZsnAGGOOIjPf/xe1qWbJwBhjjiKr\nIDDuMQBLBsYYUytXlZJT4P8rnFWzZGCMMbXILiihwqUktbVkYIwxAWtTThEAPTtEeTmSpmHJwBhj\narHRSQY94i0ZGGNMwErLLqRTTAuiIkK9HUqTsGRgjDG12JhTRM8O0d4Oo8k0KBmIyJ9FZI2IrBKR\nBSLS0WPfgyKSLiKbRGScR/kQEVnr7HtWRPz/bg5jTLNSWuFiW24xvQKkvwAaXjN4UlX7q+pA4GPg\nIQAR6Q1MAvoA44EXRCTYec2LwC1AsvMY38AYjDGmUW3ZU0yVQq8EqxnUi6oWejyNBNTZngC8o6pl\nqrodSAeGiUgCEK2q36uqAq8BlzUkBmOMaWxpOe6vtp4BlAwavMKziDwGTAYKgHOd4kTge4/DMpyy\nCme7ZvnRzn0rcCtA586dGxqqMcbUy8bsIlqEBtM5pqW3Q2kyddYMRGSRiKyr5TEBQFV/r6qdgDeB\nuxozOFWdoaopqpoSFxfXmKc2xpij2phTSI8OUQExQV21OmsGqnp+Pc/1JvAp8CcgE+jksS/JKct0\ntmuWG2OMT1BV0rILGdeng7dDaVINHU2U7PF0ArDR2Z4HTBKRcBHphrujeJmqZgOFInKGM4poMvBh\nQ2IwxpjGtLeojAOHKgKq8xga3mfwhIicBlQBO4FfAKjqehGZA2wAKoE7VdXlvOYOYDbQApjvPIwx\nxiekZTudxwE0rBQamAxU9cpj7HsMeKyW8lSgb0Pe1xhjTpaNh+ckCqyagd2BbIwxHjZmF9KxdQSt\nWwbGNBTVLBkYY4yHtOyigLq/oJolA2OMcZRVutiaW0yvhMDqLwBLBsYYc9jWvQeprNKA6y8ASwbG\nGHPYRmcaCqsZGGNMANuYU0RYSBBd20V6O5QmZ8nAGGMcadmF9IhvRUhw4H01Bt4nNsaYo0jLLqJX\nAPYXgCUDY4wBILeojLzisoAcVgqWDIwxBoBNzp3HgbS6mSdLBsYYw48jiaxmYIwxAWxDdiHx0eHE\nRIZ5OxSvsGRgjDG4VzcLxJvNqlkyMMYEvApXFel7i+kZgDebVbNkYIwJeNvzDlLuqgrYYaVgycAY\nY35c0MZqBsYYE7jSsosIDRZOjWvl7VC8xpKBMSbgbcwppHv7KEIDcBqKaoH7yY0xxrExuyhgbzar\n1ijJQETuFREVkViPsgdFJF1ENonIOI/yISKy1tn3rIhIY8RgjDEn4sDBcnIKSwO6vwAaIRmISCdg\nLLDLo6w3MAnoA4wHXhCRYGf3i8AtQLLzGN/QGIwx5kRtdKahCOR7DKBxagZPA/cB6lE2AXhHVctU\ndTuQDgwTkQQgWlW/V1UFXgMua4QYjDHmhFSPJOoVoNNQVGtQMhCRCUCmqq6usSsR2O3xPMMpS3S2\na5Yf7fy3ikiqiKTm5uY2JFRjjKnVxpxCYluFERcV7u1QvCqkrgNEZBHQoZZdvwd+h7uJ6KRQ1RnA\nDICUlBSt43BjjDluG3MCexqKanUmA1U9v7ZyEekHdANWO33AScBKERkGZAKdPA5Pcsoyne2a5cYY\n0+RcVcqmnCJuOKOLt0PxuhNuJlLVtaraXlW7qmpX3E0+g1U1B5gHTBKRcBHphrujeJmqZgOFInKG\nM4poMvBhwz+GMcYcvx37DlJWWRWw01Z7qrNmcCJUdb2IzAE2AJXAnarqcnbfAcwGWgDznYcxxjS5\nHzuPA3tYKTRiMnBqB57PHwMeq+W4VKBvY72vMcacqI3ZRQQHCd3bB+40FNXsDmRjTMDamFPIqXGR\nhIcE132wn7NkYIwJWGkBvqCNJ0sGxpiAs3TbPm54ZSmZ+SUM6NTG2+H4hJPSgWyMMb5GVflycy7P\nL05n+Y4DxLYK4/7xPW1YqcOSgTHGr1VVKQs25PD84q2szSwgoXUED1/Sm4lDO9MizPoKqlkyMMb4\nrY/XZPH3RVvYsreYru1a8pcr+3H5oCTCQqyFvCZLBsYYv1NVpTw+P42Xl2zntPgo/j5pIBf1SyAk\ngBevqYslA2OMXymrdPHb99Ywb3UWU87swkOX9CE4yJZNqYslA2OM3ygsreAXr6/g2637eOCCntw2\n6hRs/az6sWRgjPELewpLmTJzGel7i/nb1QO4YnBS3S8yh1kyMMY0e1v2FDF11nLyD5Uz68ahjEyO\n83ZIzY4lA2NMs7Z8x35unr2c8NBg3r3tTPomtvZ2SM2SJQNjTLPkqlI+XpPFb/+9hqQ2LXj1pmF0\nimnp7bCaLUsGxphmo9JVxdLt+5m/LpvP1u0hr7iMwZ3b8K8pQ4mJDPN2eM2aJQNjjE8rr6zi2615\nzF+bw4INORw4VEGL0GDO69me8X07MLZPvM062ggsGRhjfE5VlbJ0+37mrsxgwfocCksraRUewuhe\n7bmgbwJn94izqSQamSUDY4zP2L3/EHNXZjB3ZQa795cQFR7C2D4duLBfB0Z0jyUi1BLAyWLJwBjj\nVYfKK5m/Nod/r8jgu237EIERp8bym7GnMbZ3B6sBNBFLBsYYrygpd/GXzzbyXupuDpa76NKuJfeO\n6cEVQ5JIbNPC2+EFnAYlAxF5GLgFyHWKfqeqnzr7HgRuBlzANFX93CkfAswGWgCfAnerqjYkDmNM\n87J7/yFue30FaTmFXDk4iYlDO5HSpa1NHeFFjVEzeFpVp3sWiEhvYBLQB+gILBKRHqrqAl7EnUCW\n4k4G44H5jRCHMaYZ+CY9j7veWklllfLKlBTO6xnv7ZAMJ2/ZywnAO6papqrbgXRgmIgkANGq+r1T\nG3gNuOwkxWCM8SGqyr+WbOOGV5YS2yqceXedZYnAhzRGMviliKwRkZki0tYpSwR2exyT4ZQlOts1\ny2slIreKSKqIpObm5h7tMGOMjyspd/Grd1fx6CdpjO3dgQ/uHEG32Ehvh2U81JkMRGSRiKyr5TEB\nd5PPKcBAIBt4qjGDU9UZqpqiqilxcTbxlDHN0e79h7jyxW+ZtzqL3447jRevH0yrcBu74mvq/BtR\n1fPrcyIReRn42HmaCXTy2J3klGU62zXLjTF+pqCkgm/S8/jdB2txVSkzpwzl3J7tvR2WOYqGjiZK\nUNVs5+nlwDpnex7wloj8DXcHcjKwTFVdIlIoImfg7kCeDPyjITEYY7yvsLSCdZkFrMssYE2G+88d\n+w4BkNy+FTMmp1izkI9raF3tryIyEFBgB3AbgKquF5E5wAagErjTGUkEcAc/Di2dj40kMqZZUlWe\nWrCZT9Zmsz3v4OHyxDYt6JfYmp+ldKJfYmuGdYuxO4ebAWkuQ/xTUlI0NTXV22EYYxwzv97O/328\ngZHJsZzeLYZ+SW3ol9jaZg/1MSKyQlVT6jrOenGMMcctdcd+/t+naYzpHc+MG4bYzWJ+4GTdZ2CM\n8VO5RWXc+dZKktq24KmrB1gi8BNWMzDG1Fulq4ppb/9AQUkFs28cRnREqLdDMo3EagbGBLDsghLy\nisvqffxTCzfz3bZ9PHZZP3olRJ/EyExTs5qBMQFq854irnrxW1xVyj1jejB1eFdCgo/++3DB+hxe\n/N9Wrj29M1cOSTrqcaZ5spqBMQEou6CEKTOXER4azNBuMTz6SRoX/+NrUnfsr/X4HXkHufe91fRP\nas1DF/du4mhNU7BkYEyAKSipYOrM5RSVVjL7xqHMmjqUl64fQkFJBVe99B33/Xs1+w+WHz6+pNzF\nL95YQXCQ8Py1g+2eAT9lycCYAFJW6eK211PZmlvMS9cPoU/H1ogI4/t2YNGvz+a2s0/h/ZWZnPfU\n/3hn2S6qqpQ//Gcdm/YU8czEgXSKaentj2BOErvpzJgAUVWl3P3uKj5ancXTEwdw+aDa2/035RTx\nx/+sY9mO/ZwSG8m2vIPcPTqZe8b0aOKITWOo701nVjMwJkA8Pj+Nj1Zn8cAFPY+aCABO6xDFu7ed\nwVM/G0BBSQXn9WzPtNHJTRip8QYbTWRMAPjXkm28vGQ7U4d35bZRp9R5vIhw5ZAkJgzsiIgQHGQ3\nlvk7SwbG+LmPVmfx6CdpXNC3A3+8uPdx3TF8rKGmxr/Y37QxfuzbrXncO2c1w7rG8PTEgfYL3xyV\n1QyM8UMVripeWLyVf3yxhW6xkbw8OcWGhJpjsmRgjJ/ZlFPEve+tYl1mIRMGduSRS/vQuqXNIWSO\nzZKBMX4/ngoEAAATnUlEQVSi0lXFjCXbeGbhFqIiQnjp+sGM75vg7bBMM2HJwBg/sDW3mHvnrGbV\n7nwu6NuBRy/rS7tW4d4OyzQjlgyMacZcVcqsb7bz5OebaBEWzLPXDOKS/gm2xoA5bg0eTSQivxSR\njSKyXkT+6lH+oIiki8gmERnnUT5ERNY6+54V+1drzAkpOFTB5JlLefSTNEYmx7LgnlFcOqCjJQJz\nQhpUMxCRc4EJwABVLROR9k55b2AS0AfoCCwSkR6q6gJeBG4BlgKfAuOB+Q2Jw5hAs3PfQW6cvZzd\n+w/xxBX9mDi0kyUB0yANbSa6HXhCVcsAVHWvUz4BeMcp3y4i6cAwEdkBRKvq9wAi8hpwGZYMjKm3\n1B37ufX1FVSp8sbNp3P6Ke28HZLxAw1tJuoBjBSRpSLypYgMdcoTgd0ex2U4ZYnOds1yY0w9zFud\nxbX/Wkp0RAjv3z7cEoFpNHXWDERkEdChll2/d14fA5wBDAXmiEjdE5/Uk4jcCtwK0Llz58Y6rTHN\njqry/OJ0pi/YzNCubfnnDSnERIZ5OyzjR+pMBqp6/tH2icjtwPvqngd7mYhUAbFAJtDJ49AkpyzT\n2a5ZfrT3ngHMAPcU1nXFaow/Kq+s4sH31zJ3ZQaXDezIX67qT3iI3U1sGldDm4n+A5wLICI9gDAg\nD5gHTBKRcBHpBiQDy1Q1GygUkTOcUUSTgQ8bGIMxfiv/UDmTZy5l7soMfnV+Mk9PHGiJwJwUDe1A\nngnMFJF1QDkwxaklrBeROcAGoBK40xlJBHAHMBtogbvj+IQ7j4tKK5j59Q5e/W4HF/VL4HcX9qJF\nmP1HMb5BVXl3+W5W7DxAcnwrkuOj6BEfRcfWEbWO/FFVMg6UsHLXAX7Ylc+KnQdIyy5EhGMuRmNM\nY2iWK52VlLt47bsdvPTlVg4cqmBQ5zb8sCuf7u1b8eykQfTuGO3dYE3AK6+s4qEP1/HO8t1ERYRQ\nVFp5eF9UeAjd41vRo30UyfGtcFUpK3cdYOWufHKLygBoERrMgE6tGdy5LRf2S6BvYmtvfRTTzNV3\npbNmlQy+/X4Z7yzfxXNfpLO3qIxRPeL4zdge9E9qw5Itudw7ZzX5hyq4b/xp3DSiG0E2Xa/xgv0H\ny/nFGytYtn0/vzyvO/ec34PC0go27ylm854ij0fx4YXnu7RryeDObRncuQ2DOrelZ4coW0vANAq/\nSwan9u6vHSY/Q2Z+CcO6xnDv2B4/GVa3/2A5989dw8INexiZHMtTPxtA++gIL0VsAtHmPUXc/Opy\n9hSW8eRV/Zkw8Ngjp/OKyxCweYTMSeN3ySA8IVnH/m4Wvxl3GqOSY496t6Wq8vay3fzfx+tpERrM\nX68awJje8U0crQlEX2zcw7S3V9EiLJiXJ6cwsFMbb4dkjP8lgx59Buimdavqfct9+t5i7n7nB9Zn\nFXLd6Z25b3xPWrc4vjndXVXKx2uymLsyk7tHJzOkS9sTCd34OVXl5SXbeHz+Rvp0jOblySkktG7h\n7bCMAfwwGXh2INdXWaWLvy3YzD+/2kbLsGCuHJzE1BFdOTWu1TFfV+mqYt7qLJ77Ip1teQcJCRIi\nw0OYe/uZdG8f1ZCPYfxMaYWLP/5nHe+tyOCifglM/9kAG9FmfIolAw/rswqY9c0O5q3KotxVxdk9\n4rjprG4/aW6qdFXxwQ+ZPL84nR37DtGzQxR3j06md8dornrpO0KDhLl3DLdffQHkwMFyvt26j9yi\nUvYWlbG3qIzcw3+Wsu9gOapw9+hk7h6dbIMWjM+xZFCL3KIy3lq6izeW7iS3qIxT4yKZOqIblw7o\nyGfrsnl+8VZ27T9En47R3D06mfN7xR/+z70us4BJM74nsU0L5tx2pi0jGCB+/moqi9L2ABASJMS2\nCqd9dDhx1X9GRTCsawxnJcd6OVJjamfJ4BjKK6v4ZG0Ws77ZwZqMAkRAFfontebu0cmc17N9rX0T\n36bnMWXWMgZ1astrNw+zBcb9XGZ+CSP/8gVThnflrnO707ZlmP3yN81OfZNBQK50FhYSxOWDkrhs\nYCIrd+Uzf202I7rHcs5pccfsoB7ePZa/XT2QX779A796ZxXPXzeYYPty8FvvLtuFAjef1c2Gfhq/\nF5DJoJqIMKRL2+MaJXTJgI7kFpXxfx9v4OF56/m/CX1sURE/VOmq4t3U3ZzTI46kti29HY4xJ11A\nJ4MTddNZ3dhTVMo/v9xGfHQ4d52X7O2QTCP778a97Cks49HLung7FGOahCWDE3T/uJ7kFpYxfcFm\n2kdFMGFQR/YfLCevqJy8g2XsKy4nr7iMfcVluKrgjnNPJdYLTQ1llS5+2JXPKXGRtI+yu7Hr682l\nu+gQHcG5p8V5OxRjmoQlgxMUFCT85ar+5B0s5765a7hv7ppaj4sIDaLSpWzMKeT1m09v0j6G3fsP\nccebK1mbWQBA13YtSekaw9CubUnpGsMpsZHWxFWL3fsPsWRLLtPOS7b5gUzAsGTQAKHBQbx43WBm\nfbMdVff8MrGtwmjXyj30sF2rMFqGBfNeagb3zV3D84vTmTa6aZqUFm7Yw71zVqHA41f0o6i0guU7\nDvDftD38e4V75dGYyDCGdGnLyORYrju9i3WGO95etgsBJg3rVOexxvgLSwYNFBkeUmefwc9Skvhu\n2z6eWbSZYd1iOOMkrltb4api+ueb+OdX2+ibGM0L1w6hczt3B+ito9xTJ2zNPUjqjv2k7jzA8h37\nWbhhDxuyCnn8in4BX1Mor6xiTupuzusZbzcXmoBiyaAJiAh/vqwvq3fnM+3tH5h/98iTMlQxp6CU\nX769kuU7DnD9GZ35w0W9f3IvhIjQvX0rurdvxaRh7nWl/7ZgE89+kU5keAh/uKhXQCeEhRv2kFdc\nznWn25rbJrBYg2gTaRUewnPXDia/pIJ75qymqqpxb/ZbsiWXi55dwvqsQv4+aSCPXtav3jfF3TOm\nB1OHd+WVr7fz9/9uadS4mpu3lu0ksU0LRvWwjmMTWKxm0IR6d4zmoYt784f/rOOfX23j9nNOrfM1\n36Tn8fp3OwkOFqLCQ4iKCCEqIpRWHtvrMgt4/n/pJLdvxQvXDT7uyfREhIcu7s3BskqeWbSFVuEh\n/HzkKSf6MZut7XkH+SZ9H78Z28P6T0zAsWTQxK47vTPfbdvH9AWbDo/qqU1OQSl//mQDn6zJJi4q\n/PDSiUWlFZRWVP3k+CsGJfLo5X1pGXZif6VBQcITV/bnYHklj36SRqvwkMPNSM1VWaWLT9Zks/9g\nOTeO6FbnF/zby3YREiRcnWIdxybwNCgZiMi7wGnO0zZAvqoOdPY9CNwMuIBpqvq5Uz4EmA20AD4F\n7tbmMkFSIxARHr+iH2szCvjl2z/w6bSRtI0MO7y/vLKKWd+4m2tcVco95/fgtrNPOaLJp8JVRXFp\nJUWllRSWVhAkQq+EqAa39QcHCc9MHMTBslQe/GAtkeEhXDKgY4PO6Q05BaW8uXQnby/bRV6xe1nJ\nFTsP8PTEgUdtOiurdPFe6m7G9I631fFMQGpQMlDVidXbIvIUUOBs9wYmAX2AjsAiEemhqi7gReAW\nYCnuZDAemN+QOJqb6IhQnr92MFe++C2/eW81/5qSgojwbXoeD81bT/reYs7v1Z6HLu5zeCSQp9Dg\nINpGhh2RRBpLWEgQL10/hCkzl3HPu6uIDA/mvJ6+v1KcqpK68wCzv93B5+tycKkyumd7pgzvyqac\nIh79JI284qW8PDmFNi1/et0+W5fDgUMVXGsdxyZANUozkbh/kl4NnOcUTQDeUdUyYLuIpAPDRGQH\nEK2q3zuvew24jABLBgD9klrzuwt78vBHG3hqwWZ27j/ER6uz6BTTgn9NTuF8Ly7V2SIsmFempnDd\nv5byizdWMvvGoQw/1TenaC6rdPHhqixe/XYH67MKiY4I4cYRXbnhjK6HE+nI5Dg6tI7g1++u5soX\nv2X2jcPoFHNkkn1z6S46x7RkhI9+TmNOtsbqMxgJ7FHV6qEoicD3HvsznLIKZ7tmea1E5FbgVoDO\nnf3vF9uU4V35bts+nlucTlhIEHePTub2c071iamxoyJCefXGYVz9z++YOms5Y3rHc0n/jpxzWpxP\nxAdQUFLBzbOXk7rzAD3iW/HY5X25fFBirf0mF/fvSFyrcG55LZUrXvyWWVOH0jexNQDpe4tYtn0/\nD1zQ06aoNgGrzmQgIouADrXs+r2qfuhsXwO83ZiBAajqDGAGuNczaOzze5uI8NerBtCn4w4mDOxI\nl3aR3g7pCG0jw3jzltN59r9b+HRtDp+sySYqPIQxfeK5dEBHRnSPJbTGdA2uKmVbbjGrduezOiOf\n1bsLyCksJbl9K3olRDuPKLq3b0V4yIknlb2FpUyeuYytucX8fdJALh3Qsc4+k9NPace/bx/O1JnL\nmPjP73jh+iGc3SOOt5buJjRYuGpI0gnHY0xz1+DFbUQkBMgEhqhqhlP2IICqPu48/xx4GNgBLFbV\nnk75NcA5qnpbXe/TmIvbmONX6ari2637+Gh1Fp+tz6GotJK2LUO5oF8CQ7u2ZVNOMat357M2s4Di\nskrAfW9F/6TWJLRuQfreIjbtKTo8EiokyH3zW6+EaAZ3acvVKUn1Tg679h3i+leWkldcxowbUo57\nlbE9haVMnbWczXuKePjSPkz/fBMjk2N57trBx3dRjGkGmmylMxEZDzyoqmd7lPUB3gKG4e5A/i+Q\nrKouEVkGTOPHDuR/qOqndb2PJQPfUVbp4qvNeXy0OouFG/ZQUuEiNFjolRDNgKQ2DOjUhoGdWnNK\nbKsjml1cVcr2vIOkZReyMaeQtOwi0rILyS4opUu7lvzxot6M7lX7KnPV0rILmTxzGRWuKmbfOIyB\nndqc0GcoKq3g9jdW8nV6HgBv33IGZ5568qYJMcZbmjIZzAa+V9WXapT/HrgJqAR+parznfIUfhxa\nOh/4ZX2Glloy8E2HyivZkXeIU+IiT7gvYcmWXB75aAPpe4sZ1SOOhy7uTff2rX5yXOqO/dw4ezmR\nYSG88fNhx31zXU3llVX8ad56MvNLePXGoQE9DYfxX7YGsmlWKlxVvP7dTp5etJmSchdTh3dl2vnJ\nREeEArB4415uf3MFHVu34LWbh9nqY8bUkyUD0yztKy5j+oJNvLN8N+0iw/jtuNMIDQ7ivn+voWdC\nFK/eOMzWIzbmOFgyMM3auswCHp63ntSdBwA445QYXp6cQpRTUzDG1E99k4HNTWR8Ut/E1rz3izOZ\ntzqLtOwifnV+ss/c32CMP7JkYHyWiDBhYCITBno7EmP8n61nYIwxxpKBMcYYSwbGGGOwZGCMMQZL\nBsYYY7BkYIwxBksGxhhjsGRgjDGGZjQdhYgUAZu8HccxxAJ53g7iKHw5NrD4Gsriaxh/j6+LqsbV\ndVBzugN5U33m1/AWEUn11fh8OTaw+BrK4msYi8/NmomMMcZYMjDGGNO8ksEMbwdQB1+Oz5djA4uv\noSy+hrH4aEYdyMYYY06e5lQzMMYYc5JYMjDGGOP7yUBExovIJhFJF5EHvB1PTSKyQ0TWisgqEfH6\nupwiMlNE9orIOo+yGBFZKCJbnD/b+lh8D4tIpnMNV4nIhV6Mr5OILBaRDSKyXkTudsq9fg2PEZtP\nXD8RiRCRZSKy2onvEafc69eujvh84vp5xBksIj+IyMfO8ya5fj7dZyAiwcBmYAyQASwHrlHVDV4N\nzIOI7ABSVNUnbloRkVFAMfCaqvZ1yv4K7FfVJ5yE2lZV7/eh+B4GilV1ujdi8iQiCUCCqq4UkShg\nBXAZMBUvX8NjxHY1PnD9RESASFUtFpFQ4GvgbuAKfODf3zHiG48PXL9qIvJrIAWIVtWLm+r/r6/X\nDIYB6aq6TVXLgXeACV6Oyaep6lfA/hrFE4BXne1XcX+BeMVR4vMZqpqtqiud7SIgDUjEB67hMWLz\nCepW7DwNdR6KD1w7OGZ8PkNEkoCLgH95FDfJ9fP1ZJAI7PZ4noEP/eN3KLBIRFaIyK3eDuYo4lU1\n29nOAeK9GcxR/FJE1jjNSF5rxvIkIl2BQcBSfOwa1ogNfOT6OU0cq4C9wEJV9alrd5T4wEeuH/AM\ncB9Q5VHWJNfP15NBc3CWqg4ELgDudJpBfJa62wV96tcQ8CJwCjAQyAae8m44ICKtgLnAr1S10HOf\nt69hLbH5zPVTVZfz/yEJGCYifWvs9+q1O0p8PnH9RORiYK+qrjjaMSfz+vl6MsgEOnk8T3LKfIaq\nZjp/7gU+wN205Wv2OO3N1e3Oe70czxFUdY/zn7QKeBkvX0OnPXku8Kaqvu8U+8Q1rC02X7t+Tkz5\nwGLc7fE+ce08ecbnQ9dvBHCp0w/5DnCeiLxBE10/X08Gy4FkEekmImHAJGCel2M6TEQinY48RCQS\nGAusO/arvGIeMMXZngJ86MVYfqL6H7rjcrx4DZ1OxleANFX9m8cur1/Do8XmK9dPROJEpI2z3QL3\nwI+N+MC1O1Z8vnL9VPVBVU1S1a64v+u+UNXraarrp6o+/QAuxD2iaCvwe2/HUyO2U4DVzmO9L8QH\nvI27qluBu4/lZqAd8F9gC7AIiPGx+F4H1gJrnH/4CV6M7yzc1fA1wCrncaEvXMNjxOYT1w/oD/zg\nxLEOeMgp9/q1qyM+n7h+NWI9B/i4Ka+fTw8tNcYY0zR8vZnIGGNME7BkYIwxxpKBMcYYSwbGGGOw\nZGCMMQZLBsYYY7BkYIwxBvj/rMK93nUpoiwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11134ff98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/hover/hover_stats.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3: Landing\n",
    "\n",
    "What goes up, must come down! But safely!\n",
    "\n",
    "### Implement landing agent\n",
    "\n",
    "This time, you will need to edit the starting state of the quadcopter to place it at a position above the ground (at least 10 units). And change the reward function to make the agent learn to settle down _gently_. Again, create a new task for this (e.g. `Landing` in `tasks/landing.py`), and implement the changes. Note that you will have to modify the `reset()` method to return a position in the air, perhaps with some upward velocity to mimic a recent takeoff.\n",
    "\n",
    "Once you're satisfied with your task definition, create another agent or repurpose an existing one to learn this task. This might be a good chance to try out a different approach or algorithm.\n",
    "\n",
    "### Initial condition, states and rewards\n",
    "\n",
    "**Q**: How did you change the initial condition (starting state), state representation and/or reward function? Please explain below what worked best for you, and why you chose that scheme. Were you able to build in a reward mechanism for landing gently?\n",
    "\n",
    "**A**: I started the drone 10 units above the ground.  The state representation was per the \"troubleshooting\" section of the lesson, incorporating velocity. I based the reward on reaching the ground (0.0, 0.0, 0.1) and the target velocity of -2.0 for a smooth landing. I chose -2.0 because falling was about -5.0 and -1.0 was getting pretty close to hovering.  In hindsight you could set a goal to reduce velocity more as the drone approaches the ground. \n",
    "\n",
    "### Implementation notes\n",
    "\n",
    "**Q**: Discuss your implementation below briefly, using the same questions as before to guide you.\n",
    "\n",
    "**A**: I used the same agent as the other tasks.  It seemed to work well as all the agent had to learn to do was apply some positive force for a soft landing. Intuitively, it is to the hover task, but you just apply less positive force, allowing gravity pull the drone gently to the ground. In the graph, the moderate negative rewards were for applying zero or negative force.  The task punished the drone heavily for creating too much lift and climbing away. \n",
    "\n",
    "### Plot episode rewards\n",
    "\n",
    "As before, plot the episode rewards, either from a single run, or averaged over multiple runs. This task is a little different from the previous ones, since you're starting in the air. Was it harder to learn? Why/why not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f1a2ed031d0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1a2ed4b3c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/landing/landing_stats.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fb9c93e7b70>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb9f7116f98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/landing/landing_stats2.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f1a2ebb0828>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1a2ebb4a58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/landing/landing_stats2-1.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 4: Combined\n",
    "\n",
    "In order to design a complete flying system, you will need to incorporate all these basic behaviors into a single agent.\n",
    "\n",
    "### Setup end-to-end task\n",
    "\n",
    "The end-to-end task we are considering here is simply to takeoff, hover in-place for some duration, and then land. Time to create another task! But think about how you might go about it. Should it be one meta-task that activates appropriate sub-tasks, one at a time? Or would a single combined task with something like waypoints be easier to implement? There is no right or wrong way here - experiment and find out what works best (and then come back to answer the following).\n",
    "\n",
    "**Q**: What setup did you ultimately go with for this combined task? Explain briefly.\n",
    "\n",
    "**A**:\n",
    "\n",
    "### Implement combined agent\n",
    "\n",
    "Using your end-to-end task, implement the combined agent so that it learns to takeoff (at least 10 units above ground), hover (again, at least 10 units above ground), and gently come back to ground level.\n",
    "\n",
    "### Combination scheme and implementation notes\n",
    "\n",
    "Just like the task itself, it's up to you whether you want to train three separate (sub-)agents, or a single agent for the complete end-to-end task.\n",
    "\n",
    "**Q**: What did you end up doing? What challenges did you face, and how did you resolve them? Discuss any other implementation notes below.\n",
    "\n",
    "**A**:\n",
    "\n",
    "### Plot episode rewards\n",
    "\n",
    "As before, plot the episode rewards, either from a single run, or averaged over multiple runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f1a2ec94da0>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f1a2ec2f160>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# TODO: Read and plot episode rewards\n",
    "# TODO: Read and plot episode rewards\n",
    "import matplotlib.pyplot as plt\n",
    "% matplotlib inline\n",
    "import pandas as pd\n",
    "# TODO: Read and plot episode rewards\n",
    "filename = \"../out/combined/combined.csv\"\n",
    "df_stats = pd.read_csv(filename)\n",
    "df_stats[['total_reward']].plot(title=\"Episode Rewards\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reflections\n",
    "\n",
    "**Q**: Briefly summarize your experience working on this project. You can use the following prompts for ideas.\n",
    "\n",
    "- What was the hardest part of the project? (e.g. getting started, running ROS, plotting, specific task, etc.)\n",
    "- How did you approach each task and choose an appropriate algorithm/implementation for it?\n",
    "- Did you find anything interesting in how the quadcopter or your agent behaved?\n",
    "\n",
    "**A**:\n",
    "- Initially setup went fairly smoothly, but I downloaded the wrong sim, so the outside environment was used and the drone initialized in a tree stump and constantly collided with objects. I then quickly realized I had to drastically reduce the state space.  I immediately constrained rotation.  I tried for a few weeks to get movement in the x and y axes to stabilize, but I coldn't figure it out on my own and got very little help in the forums, so I decided to constraing movement to the z axis.  \n",
    "\n",
    "- Along with the \"troubleshooting\" section recently added to the lesson, I was quickly able to get the agent to learn the tasks.  I tried briefly to re-introduce x and y axis movement, but I encountered many of the same problems I had previously, again with little help in the forums.  Now in my third week of working on this project, the Udacity sim stopped working. After a couple days of troubleshooting, I discovered that other's with the same problem could not fix it either and I started using the Dennis McKinnon sim.  Having run the Graphical sim before, it was easy to figure out what was going on just using some print statements to debug drone actions.\n",
    "\n",
    "- The Udacity provided code and the \"troubleshooting\" section were very good for getting the baseline code written.  I don't have any other experience in RL, so writing any other implementation from scratch would have been extremely challenging. The Lillicrap paper provided good hints at using BN to stabilize learning. \n",
    "\n",
    "- I am disappointed that I couldn't do more with this project. I would have liked to have expanded the state and action space to at least three dimensions and it would have been nice to implement the end-to-end solution.  However, after three weeks working several hours per day in some cases, this project has been extremely frustrating for a few reasons.  First, RL isn't simply a building-block to what has been taught in the course so far.  This module accounts for about a third to a half of the total time I've spent on this course. In terms of actual hours, incuding the project, it's taken almost as much time as every other module combined. Second, the DDPG agent has a lot of moving parts.  After watching and re-watching videos and reading the various papers, I still don't have a clear intuition of exactly what changes in the actor, critic and their various parts will have in drone performance, let alone overall learning. I tried to use the loss functions for both the actor and critic for feedback on overall performance, but I just couldn't find a clear correlation like I would in a CNN or basic neural network.  I knew what actions I wanted the agent to take, but translating that into changes in the actor, critic and agent involved hours (sometimes days) of trial and error. There just isn't enough feedback on model performance. Third, until the \"troubleshooting\" section was released, I didn't receive any advice from the forum mentors or my personal mentor. This added to my frustration as other Udacity students and I commisurated in the forums. Finally, when my sim stopped working, I wasted a few days troubleshooting after finally making some progress with learning. After learning others had the same problem, I gave up and installed the McKinnon sim.\n",
    "\n",
    "- Overall, I liked how ambitious this project was as a final project, but a simpler AI-Gym task would have been far less frustrating and time-consuming.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
